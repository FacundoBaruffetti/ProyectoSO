#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>

sem_t lanzador_jabalina_sem, lanzador_martillo_sem, corredor_sem; // Semáforos para cada tipo de atleta
pthread_mutex_t corredor_mutex;     // Mutex para contar corredores
pthread_mutex_t instalaciones;      // Mutex para coordinar acceso a instalaciones
int corredores_en_instalaciones = 0; // Contador de corredores en las instalaciones

void *lanzador_jabalina_func(void *arg) {
    while (1) {
        sem_wait(&lanzador_jabalina_sem);  // Espera a que un lanzador de jabalina esté listo
        pthread_mutex_lock(&instalaciones); // Bloqueo completo de las instalaciones para lanzadores
        printf("Lanzador de jabalina en instalaciones - empieza a lanzar jabalina\n");
        sleep(2);  // Simulación de actividad específica de lanzador de jabalina
        printf("Lanzador de jabalina sale de instalaciones\n");
        pthread_mutex_unlock(&instalaciones); // Libera las instalaciones
    }
}

void *lanzador_martillo_func(void *arg) {
    while (1) {
        sem_wait(&lanzador_martillo_sem);  // Espera a que un lanzador de martillo esté listo
        pthread_mutex_lock(&instalaciones); // Bloqueo completo de las instalaciones para lanzadores
        printf("Lanzador de martillo en instalaciones - empieza a lanzar martillo\n");
        sleep(3);  // Simulación de actividad específica de lanzador de martillo
        printf("Lanzador de martillo sale de instalaciones\n");
        pthread_mutex_unlock(&instalaciones); // Libera las instalaciones
    }
}

void *corredor_func(void *arg) {
    while (1) {
        sem_wait(&corredor_sem); // Espera a que un corredor esté listo

        pthread_mutex_lock(&corredor_mutex);
        if (corredores_en_instalaciones == 0) {
            // El primer corredor bloquea a los lanzadores
            pthread_mutex_lock(&instalaciones);
        }
        corredores_en_instalaciones++;
        pthread_mutex_unlock(&corredor_mutex);

        printf("Corredor en instalaciones\n");
        sleep(1);  // Simulación de actividad en instalaciones

        // Salida de corredor
        pthread_mutex_lock(&corredor_mutex);
        corredores_en_instalaciones--;
        if (corredores_en_instalaciones == 0) {
            // Último corredor desbloquea a los lanzadores
            pthread_mutex_unlock(&instalaciones);
        }
        pthread_mutex_unlock(&corredor_mutex);

        printf("Corredor sale de instalaciones\n");
    }
}

int main() {
    pthread_t tid1, tid2, tid3, tid4;

    sem_init(&lanzador_jabalina_sem, 0, 1);  // Semáforo para lanzadores de jabalina
    sem_init(&lanzador_martillo_sem, 0, 1);  // Semáforo para lanzadores de martillo
    sem_init(&corredor_sem, 0, 1);           // Semáforo para corredores
    pthread_mutex_init(&corredor_mutex, NULL);
    pthread_mutex_init(&instalaciones, NULL);

    pthread_create(&tid1, NULL, lanzador_jabalina_func, NULL); // Lanzador de jabalina
    pthread_create(&tid2, NULL, lanzador_martillo_func, NULL); // Lanzador de martillo
    pthread_create(&tid3, NULL, corredor_func, NULL);          // Corredor
    pthread_create(&tid4, NULL, corredor_func, NULL);          // Otro corredor

    // Ejemplo de uso (activación inicial de semáforos)
    sem_post(&lanzador_jabalina_sem);
    sleep(2);
    sem_post(&lanzador_martillo_sem);
    sleep(2);
    sem_post(&corredor_sem);
    sleep(1);
    sem_post(&corredor_sem);

    // Espera para terminar hilos
    pthread_join(tid1, NULL);
    pthread_join(tid2, NULL);
    pthread_join(tid3, NULL);
    pthread_join(tid4, NULL);

    sem_destroy(&lanzador_jabalina_sem);
    sem_destroy(&lanzador_martillo_sem);
    sem_destroy(&corredor_sem);
    pthread_mutex_destroy(&corredor_mutex);
    pthread_mutex_destroy(&instalaciones);
    return 0;
}
